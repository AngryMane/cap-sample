// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: sample.cap

#include "sample.cap.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<45> b_da55b331806ed8e2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    226, 216, 110, 128,  49, 179,  85, 218,
     21,   0,   0,   0,   3,   0,   0,   0,
    203, 134, 154, 169,   6, 192,  65, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 135,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    243,  73, 165,  83, 105, 158, 105, 240,
      1,   0,   0,   0,  90,   0,   0,   0,
     83, 117,  98, 115,  99, 114, 105,  98,
    101, 114,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205, 221, 242, 164, 139, 218, 129, 162,
     31, 218,  16, 153, 129,   5, 248, 255,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    165, 162, 190, 103,  68, 191, 120, 194,
     86,   0, 201,  80, 191, 147, 225, 203,
     29,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    105, 110, 105, 116, 105,  97, 108, 105,
    122, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_da55b331806ed8e2 = b_da55b331806ed8e2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da55b331806ed8e2[] = {
  &s_a281da8ba4f2ddcd,
  &s_c278bf4467bea2a5,
  &s_cbe193bf50c90056,
  &s_fff805819910da1f,
};
static const uint16_t m_da55b331806ed8e2[] = {0, 1};
const ::capnp::_::RawSchema s_da55b331806ed8e2 = {
  0xda55b331806ed8e2, b_da55b331806ed8e2.words, 45, d_da55b331806ed8e2, m_da55b331806ed8e2,
  4, 2, nullptr, nullptr, nullptr, { &s_da55b331806ed8e2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_f0699e6953a549f3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243,  73, 165,  83, 105, 158, 105, 240,
     28,   0,   0,   0,   3,   0,   0,   0,
    226, 216, 110, 128,  49, 179,  85, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46,  83, 117,  98, 115,
     99, 114, 105,  98, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     75, 190, 126,  22, 187, 184,   0, 222,
    219, 191, 214,  59,  24, 167, 234, 146,
     17,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    112, 117, 115, 104,  77, 101, 115, 115,
     97, 103, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f0699e6953a549f3 = b_f0699e6953a549f3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0699e6953a549f3[] = {
  &s_92eaa7183bd6bfdb,
  &s_de00b8bb167ebe4b,
};
static const uint16_t m_f0699e6953a549f3[] = {0};
const ::capnp::_::RawSchema s_f0699e6953a549f3 = {
  0xf0699e6953a549f3, b_f0699e6953a549f3.words, 31, d_f0699e6953a549f3, m_f0699e6953a549f3,
  2, 1, nullptr, nullptr, nullptr, { &s_f0699e6953a549f3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_de00b8bb167ebe4b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 190, 126,  22, 187, 184,   0, 222,
     39,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46,  83, 117,  98, 115,
     99, 114, 105,  98, 101, 114,  46, 112,
    117, 115, 104,  77, 101, 115, 115,  97,
    103, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_de00b8bb167ebe4b = b_de00b8bb167ebe4b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_de00b8bb167ebe4b = {
  0xde00b8bb167ebe4b, b_de00b8bb167ebe4b.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_de00b8bb167ebe4b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_92eaa7183bd6bfdb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    219, 191, 214,  59,  24, 167, 234, 146,
     39,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46,  83, 117,  98, 115,
     99, 114, 105,  98, 101, 114,  46, 112,
    117, 115, 104,  77, 101, 115, 115,  97,
    103, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92eaa7183bd6bfdb = b_92eaa7183bd6bfdb.words;
#if !CAPNP_LITE
static const uint16_t m_92eaa7183bd6bfdb[] = {0};
static const uint16_t i_92eaa7183bd6bfdb[] = {0};
const ::capnp::_::RawSchema s_92eaa7183bd6bfdb = {
  0x92eaa7183bd6bfdb, b_92eaa7183bd6bfdb.words, 36, nullptr, m_92eaa7183bd6bfdb,
  0, 1, i_92eaa7183bd6bfdb, nullptr, nullptr, { &s_92eaa7183bd6bfdb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a281da8ba4f2ddcd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    205, 221, 242, 164, 139, 218, 129, 162,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46, 105, 110, 105, 116,
    105,  97, 108, 105, 122, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_a281da8ba4f2ddcd = b_a281da8ba4f2ddcd.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a281da8ba4f2ddcd = {
  0xa281da8ba4f2ddcd, b_a281da8ba4f2ddcd.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a281da8ba4f2ddcd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fff805819910da1f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     31, 218,  16, 153, 129,   5, 248, 255,
     28,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46, 105, 110, 105, 116,
    105,  97, 108, 105, 122, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fff805819910da1f = b_fff805819910da1f.words;
#if !CAPNP_LITE
static const uint16_t m_fff805819910da1f[] = {0};
static const uint16_t i_fff805819910da1f[] = {0};
const ::capnp::_::RawSchema s_fff805819910da1f = {
  0xfff805819910da1f, b_fff805819910da1f.words, 34, nullptr, m_fff805819910da1f,
  0, 1, i_fff805819910da1f, nullptr, nullptr, { &s_fff805819910da1f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c278bf4467bea2a5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    165, 162, 190, 103,  68, 191, 120, 194,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46, 115, 117,  98, 115,
     99, 114, 105,  98, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    243,  73, 165,  83, 105, 158, 105, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c278bf4467bea2a5 = b_c278bf4467bea2a5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c278bf4467bea2a5[] = {
  &s_f0699e6953a549f3,
};
static const uint16_t m_c278bf4467bea2a5[] = {0};
static const uint16_t i_c278bf4467bea2a5[] = {0};
const ::capnp::_::RawSchema s_c278bf4467bea2a5 = {
  0xc278bf4467bea2a5, b_c278bf4467bea2a5.words, 35, d_c278bf4467bea2a5, m_c278bf4467bea2a5,
  1, 1, i_c278bf4467bea2a5, nullptr, nullptr, { &s_c278bf4467bea2a5, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cbe193bf50c90056 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86,   0, 201,  80, 191, 147, 225, 203,
     28,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  47, 115,  97, 109, 112, 108, 101,
     46,  99,  97, 112,  58,  83,  97, 109,
    112, 108, 101,  46, 115, 117,  98, 115,
     99, 114, 105,  98, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbe193bf50c90056 = b_cbe193bf50c90056.words;
#if !CAPNP_LITE
static const uint16_t m_cbe193bf50c90056[] = {0};
static const uint16_t i_cbe193bf50c90056[] = {0};
const ::capnp::_::RawSchema s_cbe193bf50c90056 = {
  0xcbe193bf50c90056, b_cbe193bf50c90056.words, 34, nullptr, m_cbe193bf50c90056,
  0, 1, i_cbe193bf50c90056, nullptr, nullptr, { &s_cbe193bf50c90056, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Sample::InitializeParams,  ::Sample::InitializeResults>
Sample::Client::initializeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Sample::InitializeParams,  ::Sample::InitializeResults>(
      0xda55b331806ed8e2ull, 0, sizeHint, {true});
}
::kj::Promise<void> Sample::Server::initialize(InitializeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "interface/sample.cap:Sample", "initialize",
      0xda55b331806ed8e2ull, 0);
}
::capnp::Request< ::Sample::SubscribeParams,  ::Sample::SubscribeResults>
Sample::Client::subscribeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Sample::SubscribeParams,  ::Sample::SubscribeResults>(
      0xda55b331806ed8e2ull, 1, sizeHint, {true});
}
::kj::Promise<void> Sample::Server::subscribe(SubscribeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "interface/sample.cap:Sample", "subscribe",
      0xda55b331806ed8e2ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Sample::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xda55b331806ed8e2ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("interface/sample.cap:Sample", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Sample::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        initialize(::capnp::Capability::Server::internalGetTypedContext<
             ::Sample::InitializeParams,  ::Sample::InitializeResults>(context)),
        false,
        false
      };
    case 1:
      return {
        subscribe(::capnp::Capability::Server::internalGetTypedContext<
             ::Sample::SubscribeParams,  ::Sample::SubscribeResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "interface/sample.cap:Sample",
          0xda55b331806ed8e2ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Sample
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Sample::Subscriber::PushMessageParams,  ::Sample::Subscriber::PushMessageResults>
Sample::Subscriber::Client::pushMessageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Sample::Subscriber::PushMessageParams,  ::Sample::Subscriber::PushMessageResults>(
      0xf0699e6953a549f3ull, 0, sizeHint, {true});
}
::kj::Promise<void> Sample::Subscriber::Server::pushMessage(PushMessageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "interface/sample.cap:Sample.Subscriber", "pushMessage",
      0xf0699e6953a549f3ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Sample::Subscriber::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf0699e6953a549f3ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("interface/sample.cap:Sample.Subscriber", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Sample::Subscriber::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        pushMessage(::capnp::Capability::Server::internalGetTypedContext<
             ::Sample::Subscriber::PushMessageParams,  ::Sample::Subscriber::PushMessageResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "interface/sample.cap:Sample.Subscriber",
          0xf0699e6953a549f3ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Sample::Subscriber
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::Subscriber::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::Subscriber::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Sample::Subscriber::PushMessageParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Sample::Subscriber::PushMessageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Sample::Subscriber::PushMessageParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::Subscriber::PushMessageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::Subscriber::PushMessageParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Sample::Subscriber::PushMessageResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Sample::Subscriber::PushMessageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Sample::Subscriber::PushMessageResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::Subscriber::PushMessageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::Subscriber::PushMessageResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Sample::InitializeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Sample::InitializeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Sample::InitializeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::InitializeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::InitializeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Sample::InitializeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Sample::InitializeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Sample::InitializeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::InitializeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::InitializeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Sample::SubscribeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Sample::SubscribeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Sample::SubscribeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::SubscribeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::SubscribeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Sample::SubscribeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Sample::SubscribeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Sample::SubscribeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Sample::SubscribeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Sample::SubscribeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



